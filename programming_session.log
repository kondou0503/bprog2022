Script started on Thu Oct  6 15:08:27 2022
command: bash

The default interactive shell is now zsh.
To update your account to use zsh, please run `chsh -s /bin/zsh`.
For more details, please visit https://support.apple.com/kb/HT208050.
[?1034hbash-3.2$ a[Ka[Klghc[K[K[K[Klghci src/Rec.hs
GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /Users/nanami/bprog2022/.ghci
[1 of 1] Compiling Rec              ( src/Rec.hs, interpreted )
Ok, one module loaded.
2022-10-06 15:10:19.207708
[?1h=>>> product []
[?1l>1
2022-10-06 15:13:14.763324
[?1h=>>> product [1 .. 10]
[?1l>3628800
2022-10-06 15:13:42.529377
[?1h=>>> [[Kproduct [ 3[K[K3, 1,[K[K[K1,4[K5]
[?1l>15
2022-10-06 15:14:18.205099
[?1h=>>> product [9[K100[K[K[K0 .. 100[K]
[?1l>0
2022-10-06 15:14:57.7811
[?1h=>>> :r
[?1l>[1 of 1] Compiling Rec              ( src/Rec.hs, interpreted )
Ok, one module loaded.
2022-10-06 15:15:08.87864
[?1h=>>> product [3, [K1,5]
[?1l>0
2022-10-06 15:15:23.896971
[?1h=>>> :r
[?1l>[1 of 1] Compiling Rec              ( src/Rec.hs, interpreted )

[;1msrc/Rec.hs:6:18: [;1m[31merror:[0m[0m[;1m[0m[0m[;1m
    â€¢ No instance for (Num a) arising from the literal â€˜1â€™
      Possible fix:
        add (Num a) to the context of
          the type signature for:
            product :: forall a. [a] -> a
    â€¢ In the expression: 1
      In an equation for â€˜productâ€™: product [] = 1[0m[0m
[;1m[34m  |[0m[0m
[;1m[34m6 |[0m[0m product []     = [;1m[31m1[0m[0m
[;1m[34m  |[0m[0m[;1m[31m                  ^[0m[0m
Failed, no modules loaded.
2022-10-06 15:30:07.628048
[?1h=>>> :r
[?1l>[1 of 1] Compiling Rec              ( src/Rec.hs, interpreted )
Ok, one module loaded.
2022-10-06 15:31:27.598198
[?1h=>>> :r
[?1l>[1 of 1] Compiling Rec              ( src/Rec.hs, interpreted )
Ok, one module loaded.
2022-10-06 15:42:31.808738
[?1h=>>> drop [3,1,4,1,5]
[?1l>
[;1m<interactive>:10:6: [;1m[31merror:[0m[0m[;1m[0m[0m[;1m
    â€¢ Couldn't match expected type â€˜Intâ€™ with actual type â€˜[a0]â€™
    â€¢ In the first argument of â€˜dropâ€™, namely â€˜[3, 1, 4, 1, ....]â€™
      In the expression: drop [3, 1, 4, 1, ....]
      In an equation for â€˜itâ€™: it = drop [3, 1, 4, ....][0m[0m
2022-10-06 15:42:39.130301
[?1h=>>> drop 2 [3,1,4,1,5]
[?1l>[4,1,5]
2022-10-06 15:42:44.720769
[?1h=>>> do[Krop5[K 5 [3,1,5[K4,1,5]
[?1l>[]
2022-10-06 15:42:58.107375
[?1h=>>> :r
[?1l>[1 of 1] Compiling Rec              ( src/Rec.hs, interpreted )

[;1msrc/Rec.hs:15:10: [;1m[31merror:[0m[0m[;1m[0m[0m[;1m
    Illegal type: â€˜1â€™ Perhaps you intended to use DataKinds[0m[0m
[;1m[34m   |[0m[0m
[;1m[34m15 |[0m[0m init :: [[;1m[31m1[0m[0m]-> [a]
[;1m[34m   |[0m[0m[;1m[31m          ^[0m[0m
Failed, no modules loaded.
2022-10-06 16:01:07.208817
[?1h=>>> :r
[?1l>[1 of 1] Compiling Rec              ( src/Rec.hs, interpreted )

[;1msrc/Rec.hs:10:1: [;1m[31merror:[0m[0m[;1m[0m[0m[;1m
    Equations for â€˜dropâ€™ have different numbers of arguments
      src/Rec.hs:10:1-12
      src/Rec.hs:11:1-20[0m[0m
[;1m[34m   |[0m[0m
[;1m[34m10 |[0m[0m [;1m[31mdrop xs = xs[0m[0m
[;1m[34m   |[0m[0m[;1m[31m ^^^^^^^^^^^^...[0m[0m
Failed, no modules loaded.
2022-10-06 16:01:18.900598
[?1h=>>> :r
[?1l>[1 of 1] Compiling Rec              ( src/Rec.hs, interpreted )

[;1msrc/Rec.hs:11:1: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Woverlapping-patterns[0m[0m[;1m][0m[0m[;1m
    Pattern match is redundant
    In an equation for â€˜dropâ€™: drop 0 (x : xs) = ...[0m[0m
[;1m[34m   |[0m[0m
[;1m[34m11 |[0m[0m [;1m[35mdrop 0 (x:xs) = x:xs[0m[0m
[;1m[34m   |[0m[0m[;1m[35m ^^^^^^^^^^^^^^^^^^^^[0m[0m
Ok, one module loaded.
2022-10-06 16:01:41.49607
[?1h=>>> init [3,1,4,1,5]
[?1l>[3,1,4,1]
2022-10-06 16:02:14.610235
[?1h=>>> a[K:r
[?1l>[1 of 1] Compiling Rec              ( src/Rec.hs, interpreted )
Ok, one module loaded.
2022-10-06 16:03:09.83166
[?1h=>>> init []
[?1l>*** Exception: karaya-
CallStack (from HasCallStack):
  error, called at src/Rec.hs:15:11 in main:Rec
2022-10-06 16:03:15.261822
[?1h=>>> :r
[?1l>[1 of 1] Compiling Rec              ( src/Rec.hs, interpreted )

[;1msrc/Rec.hs:23:7: [;1m[31merror:[0m[0m[;1m[0m[0m[;1m
    â€¢ Variable not in scope: otherwides :: Bool
    â€¢ Perhaps you meant â€˜otherwiseâ€™ (imported from Prelude)[0m[0m
[;1m[34m   |[0m[0m
[;1m[34m23 |[0m[0m     | [;1m[31motherwides[0m[0m = error "negative number"
[;1m[34m   |[0m[0m[;1m[31m       ^^^^^^^^^^[0m[0m
Failed, no modules loaded.
2022-10-06 16:10:19.649992
[?1h=>>> :d[Kr
[?1l>[1 of 1] Compiling Rec              ( src/Rec.hs, interpreted )
Ok, one module loaded.
2022-10-06 16:10:36.657377
[?1h=>>> fa [Kc 10
[?1l>3628800
2022-10-06 16:10:42.926554
[?1h=>>> fac -2
[?1l>
[;1m<interactive>:22:5: [;1m[31merror:[0m[0m[;1m[0m[0m[;1m
    â€¢ No instance for (Num (Int -> Int)) arising from a use of â€˜-â€™
        (maybe you haven't applied a function to enough arguments?)
    â€¢ In the expression: fac - 2
      In an equation for â€˜itâ€™: it = fac - 2[0m[0m
2022-10-06 16:10:46.352891
[?1h=>>> fac -2[K[K[K[K[K[Kfav[Kc (-2)
[?1l>*** Exception: negative number
CallStack (from HasCallStack):
  error, called at src/Rec.hs:23:19 in main:Rec
2022-10-06 16:12:39.849269
[?1h=>>> :q
[?1l>Leaving GHCi.
bash-3.2$ git add s[K.
bash-3.2$ git commit ""1"0"/"6"
error: pathspec '10/6' did not match any file(s) known to git
bash-3.2$ git commit -m ""1"0"/"6"
[main 9401d1a] 10/6
 Committer: è¿‘è—¤ä¸ƒæµ· <nanami@kondounanaminoMacBook-Pro-3.local>
Your name and email address were configured automatically based
on your username and hostname. Please check that they are accurate.
You can suppress this message by setting them explicitly. Run the
following command and follow the instructions in your editor to edit
your configuration file:

    git config --global --edit

After doing this, you may fix the identity used for this commit with:

    git commit --amend --reset-author

 3 files changed, 175 insertions(+)
 create mode 100644 programming_session.log
 create mode 100644 src/Rec.hs
 create mode 100755 start_programming
bash-3.2$ git push
Enumerating objects: 8, done.
Counting objects:  12% (1/8)Counting objects:  25% (2/8)Counting objects:  37% (3/8)Counting objects:  50% (4/8)Counting objects:  62% (5/8)Counting objects:  75% (6/8)Counting objects:  87% (7/8)Counting objects: 100% (8/8)Counting objects: 100% (8/8), done.
Delta compression using up to 4 threads
Compressing objects:  16% (1/6)Compressing objects:  33% (2/6)Compressing objects:  50% (3/6)Compressing objects:  66% (4/6)Compressing objects:  83% (5/6)Compressing objects: 100% (6/6)Compressing objects: 100% (6/6), done.
Writing objects:  16% (1/6)Writing objects:  33% (2/6)Writing objects:  50% (3/6)Writing objects:  66% (4/6)Writing objects:  83% (5/6)Writing objects: 100% (6/6)Writing objects: 100% (6/6), 2.41 KiB | 2.41 MiB/s, done.
Total 6 (delta 2), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas:   0% (0/2)[Kremote: Resolving deltas:  50% (1/2)[Kremote: Resolving deltas: 100% (2/2)[Kremote: Resolving deltas: 100% (2/2), completed with 2 local objects.[K
To github.com:kondou0503/bprog2022.git
   1f6f98a..9401d1a  main -> main
bash-3.2$ Script started on Thu Oct 13 15:09:46 2022
command: bash

The default interactive shell is now zsh.
To update your account to use zsh, please run `chsh -s /bin/zsh`.
For more details, please visit https://support.apple.com/kb/HT208050.
[?1034hbash-3.2$ lghci src?[K/Rec.hs
GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /Users/nanami/bprog2022/.ghci
[1 of 1] Compiling Rec              ( src/Rec.hs, interpreted )

[;1msrc/Rec.hs:33:10: [;1m[31merror:[0m[0m[;1m[0m[0m[;1m
    Not in scope: type constructor or class â€˜Ordaâ€™
    Perhaps you meant â€˜Ordâ€™ (imported from Prelude)[0m[0m
[;1m[34m   |[0m[0m
[;1m[34m33 |[0m[0m msort :: [;1m[31mOrda[0m[0m => [a] -> [a]
[;1m[34m   |[0m[0m[;1m[31m          ^^^^[0m[0m
Failed, no modules loaded.
2022-10-13 15:10:06.832106
[?1h=>>> r[K:r
[?1l>[1 of 1] Compiling Rec              ( src/Rec.hs, interpreted )

[;1msrc/Rec.hs:33:10: [;1m[31merror:[0m[0m[;1m[0m[0m[;1m
    â€¢ Expecting one more argument to â€˜Ordâ€™
      Expected a constraint, but â€˜Ordâ€™ has kind â€˜* -> Constraintâ€™
    â€¢ In the type signature: msort :: Ord => [a] -> [a][0m[0m
[;1m[34m   |[0m[0m
[;1m[34m33 |[0m[0m msort :: [;1m[31mOrd[0m[0m => [a] -> [a]
[;1m[34m   |[0m[0m[;1m[31m          ^^^[0m[0m
Failed, no modules loaded.
2022-10-13 15:10:34.01377
[?1h=>>> :r
[?1l>[1 of 1] Compiling Rec              ( src/Rec.hs, interpreted )
Ok, one module loaded.
2022-10-13 15:11:36.668291
[?1h=>>> :r
[?1l>[1 of 1] Compiling Rec              ( src/Rec.hs, interpreted )
Ok, one module loaded.
2022-10-13 15:13:03.107606
[?1h=>>> sorttest
[?1l>[3,1,4,1,5,9,2,6,5,3,5,8,9]
2022-10-13 15:13:09.948669
[?1h=>>> msort sorttest
[?1l>[1,1,2,3,3,4,5,5,5,6,8,9,9]
2022-10-13 15:13:29.877715
[?1h=>>> 
[?1l>2022-10-13 15:53:31.485042
[?1h=>>> 
[?1l>2022-10-13 15:53:31.9061
[?1h=>>> :r
[?1l>[1 of 1] Compiling Rec              ( src/Rec.hs, interpreted )

[;1msrc/Rec.hs:50:1: [;1m[31merror:[0m[0m[;1m[0m[0m[;1m
    The type signature for â€˜tncâ€™ lacks an accompanying binding[0m[0m
[;1m[34m   |[0m[0m
[;1m[34m50 |[0m[0m [;1m[31mtnc[0m[0m :: Int -> Int
[;1m[34m   |[0m[0m[;1m[31m ^^^[0m[0m
Failed, no modules loaded.
2022-10-13 15:54:49.773224
[?1h=>>> ;r
[?1l>
[;1m<interactive>:9:2: [;1m[31merror:[0m[0m[;1m[0m[0m[;1m
    Parse error: module header, import declaration
    or top-level declaration expected.[0m[0m
2022-10-13 15:54:59.663257
[?1h=>>> :r
[?1l>[1 of 1] Compiling Rec              ( src/Rec.hs, interpreted )

[;1msrc/Rec.hs:50:1: [;1m[31merror:[0m[0m[;1m[0m[0m[;1m
    The type signature for â€˜incâ€™ lacks an accompanying binding
      Perhaps you meant â€˜inxâ€™ (Defined at src/Rec.hs:51:1)[0m[0m
[;1m[34m   |[0m[0m
[;1m[34m50 |[0m[0m [;1m[31minc[0m[0m :: Int -> Int
[;1m[34m   |[0m[0m[;1m[31m ^^^[0m[0m
Failed, no modules loaded.
2022-10-13 15:55:04.325508
[?1h=>>> :r
[?1l>[1 of 1] Compiling Rec              ( src/Rec.hs, interpreted )

[;1msrc/Rec.hs:47:10: [;1m[31merror:[0m[0m[;1m[0m[0m[;1m
    â€¢ Expected kind â€˜* -> *â€™, but â€˜a -> aâ€™ has kind â€˜*â€™
    â€¢ In the type signature: twice :: (a -> a) (a -> a)[0m[0m
[;1m[34m   |[0m[0m
[;1m[34m47 |[0m[0m twice :: [;1m[31m(a -> a) (a -> a)[0m[0m
[;1m[34m   |[0m[0m[;1m[31m          ^^^^^^^^^^^^^^^^^[0m[0m
Failed, no modules loaded.
2022-10-13 15:55:20.915857
[?1h=>>> :r
[?1l>[1 of 1] Compiling Rec              ( src/Rec.hs, interpreted )

[;1msrc/Rec.hs:48:16: [;1m[31merror:[0m[0m[;1m[0m[0m[;1m
    â€¢ Variable not in scope: fx
    â€¢ Perhaps you meant one of these: â€˜xâ€™ (line 48), â€˜fâ€™ (line 48)[0m[0m
[;1m[34m   |[0m[0m
[;1m[34m48 |[0m[0m twice f x = f ([;1m[31mfx[0m[0m)
[;1m[34m   |[0m[0m[;1m[31m                ^^[0m[0m

[;1msrc/Rec.hs:51:7: [;1m[31merror:[0m[0m[;1m[0m[0m[;1m Variable not in scope: x :: Int -> Int[0m[0m
[;1m[34m   |[0m[0m
[;1m[34m51 |[0m[0m inc = [;1m[31mx[0m[0m + 1
[;1m[34m   |[0m[0m[;1m[31m       ^[0m[0m
Failed, no modules loaded.
2022-10-13 15:56:51.431431
[?1h=>>> :r
[?1l>[1 of 1] Compiling Rec              ( src/Rec.hs, interpreted )

[;1msrc/Rec.hs:48:16: [;1m[31merror:[0m[0m[;1m[0m[0m[;1m
    â€¢ Variable not in scope: fx
    â€¢ Perhaps you meant one of these: â€˜xâ€™ (line 48), â€˜fâ€™ (line 48)[0m[0m
[;1m[34m   |[0m[0m
[;1m[34m48 |[0m[0m twice f x = f ([;1m[31mfx[0m[0m)
[;1m[34m   |[0m[0m[;1m[31m                ^^[0m[0m
Failed, no modules loaded.
2022-10-13 15:57:05.442011
[?1h=>>> :r
[?1l>[1 of 1] Compiling Rec              ( src/Rec.hs, interpreted )
Ok, one module loaded.
2022-10-13 15:57:15.061534
[?1h=>>> twice inc
[?1l>
[;1m<interactive>:15:1: [;1m[31merror:[0m[0m[;1m[0m[0m[;1m
    â€¢ No instance for (Show (Int -> Int)) arising from a use of â€˜printâ€™
        (maybe you haven't applied a function to enough arguments?)
    â€¢ In a stmt of an interactive GHCi command: print it[0m[0m
2022-10-13 15:57:22.995883
[?1h=>>> twice inc 0
[?1l>2
2022-10-13 15:57:33.205872
[?1h=>>> twice twice 0
[?1l>
[;1m<interactive>:17:1: [;1m[31merror:[0m[0m[;1m[0m[0m[;1m
    â€¢ Non type-variable argument in the constraint: Num (a -> a)
      (Use FlexibleContexts to permit this)
    â€¢ When checking the inferred type
        it :: forall {a}. Num (a -> a) => a -> a[0m[0m
2022-10-13 15:58:16.979052
[?1h=>>> twice twice inc 0
[?1l>4
2022-10-13 15:58:24.697055
[?1h=>>> twice twice twii[Kce inc 0
[?1l>16
2022-10-13 15:59:22.633186
[?1h=>>> twice twice twice twice inc 0
[?1l>65536
2022-10-13 15:59:32.000075
[?1h=>>> sa[K[K:r
[?1l>[1 of 1] Compiling Rec              ( src/Rec.hs, interpreted )
Ok, one module loaded.
2022-10-13 16:07:02.732002
[?1h=>>> map inc sample
[?1l>[4,2,5,2,6,10,3,7,6,4,6,9,10]
2022-10-13 16:07:09.085529
[?1h=>>> timpo[K[K[K[K[K:w[Kq
[?1l>Leaving GHCi.
bash-3.2$ git add .
